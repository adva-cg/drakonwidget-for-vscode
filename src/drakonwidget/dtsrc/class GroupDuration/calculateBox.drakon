{
    "keywords": {
        "scenario": false,
        "async": false,
        "export": false,
        "function": true,
        "algoprop": false
    },
    "tag": "189457886",
    "params": "element\nconfig",
    "when_created": 1671082701.1176,
    "parent_id": "4dc44fb7",
    "props": [],
    "language": "LANG_S42",
    "items": {
        "1": {
            "type": "end",
            "id": "1"
        },
        "2": {
            "branchId": 1,
            "one": "4",
            "id": "2",
            "type": "branch",
            "content": "Inner box"
        },
        "4": {
            "type": "action",
            "id": "4",
            "one": "16",
            "content": "element.innerBox = boxFromPoint(\n    element.x,\n    element.y,\n    element.w,\n    element.h\n)"
        },
        "15": {
            "branchId": 4,
            "one": "1",
            "id": "15",
            "type": "branch",
            "content": "Exit"
        },
        "16": {
            "branchId": 2,
            "one": "17",
            "id": "16",
            "type": "branch",
            "content": "Outer box"
        },
        "17": {
            "one": "18",
            "id": "17",
            "type": "action",
            "two": "",
            "content": "topY = element.y + element.hiY\nbottomY = element.y + element.loY"
        },
        "18": {
            "one": "19",
            "id": "18",
            "type": "action",
            "two": "",
            "content": "topX = element.x + element.hiX\nbottomX = element.x + element.loX"
        },
        "19": {
            "one": "20",
            "id": "19",
            "type": "action",
            "two": "",
            "content": "innerRight = element.innerBox.left + element\n.innerBox.width"
        },
        "20": {
            "one": "21",
            "id": "20",
            "type": "action",
            "two": "",
            "content": "left = Math.min(\n    topX,\n    Math.min(\n        bottomX,\n        element.innerBox.left\n    )\n)"
        },
        "21": {
            "one": "22",
            "id": "21",
            "type": "action",
            "two": "",
            "content": "right = Math.max(\n    topX,\n    Math.max(bottomX, innerRight)\n)"
        },
        "22": {
            "one": "23",
            "id": "22",
            "type": "action",
            "two": "",
            "content": "margin = config.socketTouchRadius"
        },
        "23": {
            "one": "24",
            "id": "23",
            "type": "action",
            "two": "",
            "content": "width = right - left\nheight = bottomY - topY"
        },
        "24": {
            "one": "25",
            "id": "24",
            "type": "action",
            "two": "",
            "content": "element.box = createBoxWithMargin(\n    left,\n    topY,\n    width,\n    height,\n    margin\n)"
        },
        "25": {
            "branchId": 3,
            "one": "26",
            "id": "25",
            "type": "branch",
            "content": "Lines"
        },
        "26": {
            "type": "action",
            "one": "27",
            "id": "26",
            "content": "element.subboxes = []"
        },
        "27": {
            "type": "action",
            "id": "27",
            "one": "28",
            "content": "element.subboxes.push(\n    boxForVerticalLine(\n        element.x,\n        topY,\n        element.y,\n        margin\n    )\n)"
        },
        "28": {
            "type": "action",
            "id": "28",
            "one": "29",
            "content": "element.subboxes.push(\n    boxForVerticalLine(\n        element.x,\n        element.y,\n        bottomY,\n        margin\n    )\n)"
        },
        "29": {
            "flag1": 0,
            "id": "29",
            "type": "question",
            "two": "32",
            "one": "30",
            "content": "element.flag1"
        },
        "30": {
            "type": "action",
            "id": "30",
            "one": "31",
            "content": "element.subboxes.push(\n    boxForHorizontalLine(\n        element.x,\n        topY,\n        element.x + element.hiX,\n        margin\n    )\n)"
        },
        "31": {
            "type": "action",
            "id": "31",
            "one": "15",
            "content": "element.subboxes.push(\n    boxForHorizontalLine(\n        element.x,\n        bottomY,\n        element.x + element.loX,\n        margin\n    )\n)"
        },
        "32": {
            "one": "33",
            "id": "32",
            "type": "action",
            "two": "",
            "content": "element.subboxes.push(\n    boxForHorizontalLine(\n        element.x + element.hiX,\n        topY,\n        element.x,\n        margin\n    )\n)"
        },
        "33": {
            "one": "15",
            "id": "33",
            "type": "action",
            "two": "",
            "content": "element.subboxes.push(\n    boxForHorizontalLine(\n        element.x + element.loX,\n        bottomY,\n        element.x,\n        margin\n    )\n)"
        }
    },
    "version": 20180619,
    "updated_by": "stipan",
    "type": "drakon",
    "when_updated": 1671351289.3097,
    "name": "calculateBox",
    "created_by": "stipan"
}