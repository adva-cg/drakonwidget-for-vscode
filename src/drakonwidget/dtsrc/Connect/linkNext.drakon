{
    "keywords": {
        "scenario": false,
        "async": false,
        "export": false,
        "function": true,
        "algoprop": false
    },
    "tag": "154180042",
    "params": "context\nnode1\nnextItemId",
    "when_created": 1657540235.7638,
    "parent_id": "9b19b1c2",
    "props": [],
    "when_updated": 1675146568.614,
    "items": {
        "1": {
            "type": "end",
            "id": "1"
        },
        "2": {
            "type": "branch",
            "branchId": 0,
            "one": "4",
            "id": "2"
        },
        "4": {
            "flag1": 1,
            "id": "4",
            "type": "question",
            "two": "1",
            "one": "7",
            "content": "nextItemId"
        },
        "5": {
            "type": "action",
            "id": "5",
            "one": "6",
            "content": "node2 = getNodeForItem(\n    visuals,\n    nextItemId\n)"
        },
        "6": {
            "flag1": 0,
            "id": "6",
            "type": "question",
            "two": "15",
            "one": "8",
            "content": "node2.type == \"branch\""
        },
        "7": {
            "type": "action",
            "id": "7",
            "one": "5",
            "content": "visuals = context.visuals"
        },
        "8": {
            "flag1": 0,
            "id": "8",
            "type": "question",
            "two": "13",
            "one": "9",
            "content": "isArrowLoop(node2)"
        },
        "9": {
            "type": "action",
            "one": "10",
            "id": "9",
            "content": "prevCount = node2.prev.length"
        },
        "10": {
            "type": "action",
            "id": "10",
            "one": "11",
            "content": "node1.next.push(node2)\nnode2.prev.push(node1)"
        },
        "11": {
            "flag1": 1,
            "id": "11",
            "type": "question",
            "two": "1",
            "one": "12",
            "content": "prevCount === 0"
        },
        "12": {
            "type": "action",
            "id": "12",
            "one": "1",
            "content": "linkNodeToChildren(context, nextItemId)"
        },
        "13": {
            "flag1": 0,
            "id": "13",
            "type": "question",
            "one": "9",
            "two": "14",
            "content": "isUpstream(visuals, node1, node2)"
        },
        "14": {
            "type": "action",
            "one": "1",
            "id": "14",
            "content": "node1.next.push(node2)\nnode2.aprev.push(node1)"
        },
        "15": {
            "type": "action",
            "id": "15",
            "one": "16",
            "content": "address = utils.last(context.addresses)"
        },
        "16": {
            "flag1": 1,
            "id": "16",
            "type": "question",
            "one": "18",
            "two": "20",
            "content": "address"
        },
        "17": {
            "type": "action",
            "id": "17",
            "one": "1",
            "content": "node1.next.push(address)\naddress.prev.push(node1)"
        },
        "18": {
            "flag1": 1,
            "id": "18",
            "type": "question",
            "one": "17",
            "two": "20",
            "content": "address.branch.id == nextItemId"
        },
        "20": {
            "type": "action",
            "one": "22",
            "id": "20",
            "content": "address = createNode(\n    visuals,\n    undefined,\n    \"address\",\n    node2.content,\n    undefined\n)"
        },
        "22": {
            "type": "action",
            "one": "23",
            "id": "22",
            "content": "flowIcon(visuals, address)"
        },
        "23": {
            "type": "action",
            "id": "23",
            "one": "17",
            "content": "address.branch = node2\naddress.itemId = node2.itemId\ncontext.addresses.push(address)"
        }
    },
    "updated_by": "stipan",
    "version": 20180619,
    "type": "drakon",
    "language": "LANG_S42",
    "name": "linkNext",
    "created_by": "stipan"
}